class SwigBean {
    /**
     * 模块名称
     */
    String mModuleName
    /**
     * 是否是c++,默认为false
     */
    boolean mIsCxx = false
    /**
     * 编译参数，默认为空
     */
    String mArgs = ""

    SwigBean(String moduleName, boolean isCxx, String args) {
        mModuleName = moduleName
        mIsCxx = isCxx
        mArgs = args
    }

    SwigBean(String moduleName) {
        mModuleName = moduleName
    }
}

/**
 * 生成的包名
 */
def swigPackage = "com.shenby.swig"

List<SwigBean> swigBeanList = [
        new SwigBean("Unix", false, " "),
        new SwigBean("MyEnum", false, " "),
        new SwigBean("MyStruct", false, " "),
]

/**
 * 配置swig自动生成package
 * https://blog.csdn.net/chifu5720/article/details/102919849
 */
task runSwig(type: Exec) {
    doLast {
        println "stop runSwig"
    }
    doFirst {
        println "start runSwig"
    }

    def line = workingDir.absolutePath
    println line

    def osName = System.getProperty("os.name").toLowerCase()

    println "osName = $osName"
    def isWindowsOs = osName.contains("windows")

    println "工作目录 ${workingDir.absolutePath}"
    def javaOutDir = "${line}/src/main/java/${swigPackage.replace(".", "/")}"


    for (SwigBean bean : swigBeanList) {
        def swigPath = "${line}/src/main/jni/${bean.mModuleName}.i"
        def cxx = bean.mIsCxx ? "-cxx -java" : "-java"
        def wrapName = bean.mIsCxx ? "_wrap.cxx" : "_wrap.c"


        if (isWindowsOs) {
            //todo windows 未测试
            commandLine("cmd", "/c", "swig")

            args(cxx, "-package", swigPackage,
                    "-outdir", javaOutDir,
                    "-o", "${line}/src/main/jni/${bean.mModuleName}${wrapName}",
                    swigPath
            )

        } else {
            //MacOs ok
            //todo Linux 未测试
            commandLine "swig"
            args(cxx, "-package", swigPackage,
                    "-outdir", javaOutDir,
                    "-o", "${line}/src/main/jni/${bean.mModuleName}${wrapName}",
                    swigPath
            )
        }
    }
}